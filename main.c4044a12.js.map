{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","tableBody","tBodies","employees","getEmployees","rows","formatSalaryToNumber","salary","Number","replace","formatNumberToSalary","num","toLocaleString","nodeListOfEmployees","employeesItems","map","employee","name","cells","textContent","position","age","createSorterByKey","field","prev","curr","localeCompare","updateEmployeesMarkup","employeesList","tableBodyMarkup","innerHTML","addEventListener","e","tableHeading","target","closest","sortKey","compareFunction","trim","toLowerCase","sort"],"mappings":"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","file":"main.c4044a12.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write code here\nconst table = document.querySelector('table');\nconst tableBody = table.tBodies[0];\nconst employees = getEmployees(tableBody.rows);\n\ndocument.addEventListener('click', (e) => {\n  const tableHeading = e.target.closest('th');\n\n  if (!tableHeading || tableHeading.closest('tFoot')) {\n    return;\n  }\n\n  const sortKey = tableHeading.textContent.trim('').toLowerCase();\n  const compareFunction = createSorterByKey(sortKey);\n\n  employees.sort(compareFunction);\n  updateEmployeesMarkup(employees);\n});\n\nfunction formatSalaryToNumber(salary) {\n  return Number(salary.replace(/\\$|,/gi, ''));\n};\n\nfunction formatNumberToSalary(num) {\n  return `$${num.toLocaleString('en')}`;\n};\n\nfunction getEmployees(nodeListOfEmployees) {\n  const employeesItems = [...nodeListOfEmployees];\n\n  return employeesItems.map((employee) => ({\n    name: employee.cells[0].textContent,\n    position: employee.cells[1].textContent,\n    age: Number(employee.cells[2].textContent),\n    salary: formatSalaryToNumber(employee.cells[3].textContent),\n  }));\n};\n\nfunction createSorterByKey(field) {\n  return (prev, curr) => typeof curr[field] === 'string'\n    ? prev[field].localeCompare(curr[field])\n    : prev[field] - curr[field];\n};\n\nfunction updateEmployeesMarkup(employeesList) {\n  let tableBodyMarkup = '';\n\n  for (const employee of employeesList) {\n    const tableEmployeeMarkup = `\n      <tr>\n        <td>${employee.name}</td>\n        <td>${employee.position}</td>\n        <td>${employee.age}</td>\n        <td>${formatNumberToSalary(employee.salary)}</td>\n      </tr>\n    `;\n\n    tableBodyMarkup += tableEmployeeMarkup;\n  }\n\n  tableBody.innerHTML = tableBodyMarkup;\n}\n"]}